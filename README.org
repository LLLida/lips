#+TITLE: Lips programming language
#+AUTHOR: Adil Mokhammad

* Roadmap

** Improve tests



** Decent error handling

Exceptions are implemented. Need to improve error handling inside internal functions.

** User-defined types

This is a needed feature. Maybe I would make int, real user types?

** Efficient string/vector allocator

Reduce number of allocations by merging strings into pages.

** Garbage collector

Use mark-and-sweep algorithm.

** Improve API

Library initialization should look like this:
#+begin_src c
  Lips_Description desc = { .alloc = alloc_function,
                            . dealloc = dealloc_function,
                            .initial_size = 1024,
                            /* ... */
                            .some_last_option = "blabla" };
  Lips_Interpreter* interp = Lips_CreateInterpreter(&desc);
#+end_src

** Builtin functions/macros

 1. arithmetic functions that work both on integers and floats(=+=, =/=, =-= etc.)
 2. list managing functions(=car=, =list=, =caddaar= etc.)
 3. general functions(===, =nilp=, =typeof= etc.)
 4. environment functions(=eval=, =intern= etc.)
 5. string functions(=format=, =concat=, =capitalize= etc.)

** Docstrings

Do we really need them?

** Syntactic sugar

#+begin_src emacs-lisp
  (quote something) -> 'something
  (lambda (a) $car (list a 7 6 5)) -> (lambda (a) (car (list a 7 6 5)))
#+end_src

** Rename to Lips_Machine

=Lips_Interpreter= sounds very ugly and is hard to spell. Instead =Lips_Machine= is super cool. The diff would be gigantic haha
